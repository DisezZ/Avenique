// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/features/account/domain/account.dart';
import 'src/features/budget/domain/budget.dart';
import 'src/features/category/domain/category.dart';
import 'src/features/goal/domain/goal.dart';
import 'src/features/payment/domain/payment.dart';
import 'src/features/record/domain/record.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4841247993905699437),
      name: 'Account',
      lastPropertyId: const IdUid(3, 3848595779900618938),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7645240398593915380),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8177801459198244626),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 7305675609872637864)),
        ModelProperty(
            id: const IdUid(3, 3848595779900618938),
            name: 'balance',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 4433489012852754701),
            name: 'goals',
            targetId: const IdUid(4, 7665000035849211467))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'records', srcEntity: 'Record', srcField: 'account'),
        ModelBacklink(
            name: 'budgets', srcEntity: 'Budget', srcField: 'accounts'),
        ModelBacklink(
            name: 'payments', srcEntity: 'Payment', srcField: 'account')
      ]),
  ModelEntity(
      id: const IdUid(2, 5783459404910710888),
      name: 'Budget',
      lastPropertyId: const IdUid(4, 829545242459877581),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 897448538952545366),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7907656876817685400),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 3483507444887785267)),
        ModelProperty(
            id: const IdUid(3, 3732018446953452387),
            name: 'amount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 829545242459877581),
            name: 'period',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 2912769593831592751),
            name: 'accounts',
            targetId: const IdUid(1, 4841247993905699437)),
        ModelRelation(
            id: const IdUid(3, 2489885297072464504),
            name: 'categories',
            targetId: const IdUid(3, 1855231126968315103))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 1855231126968315103),
      name: 'Category',
      lastPropertyId: const IdUid(3, 2534938247409377927),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4740817988918888562),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1186890166344469867),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(3, 3155067107726218488)),
        ModelProperty(
            id: const IdUid(3, 2534938247409377927),
            name: 'nature',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 7665000035849211467),
      name: 'Goal',
      lastPropertyId: const IdUid(5, 1156259549848821416),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6520048539727824333),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9132432712852432475),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(4, 7918990559214481343)),
        ModelProperty(
            id: const IdUid(3, 2448839156235215233),
            name: 'targetAmount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5230215214398178132),
            name: 'currentAmount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1156259549848821416),
            name: 'endDate',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 4729004912360467001),
      name: 'Payment',
      lastPropertyId: const IdUid(7, 7694403370233527358),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8613598199246054866),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7171826882505033063),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(5, 928876973103434414)),
        ModelProperty(
            id: const IdUid(3, 2452683592881365466),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2589792580381726770),
            name: 'amount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4499472570183044958),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7366633998432877208),
            name: 'accountId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 4866779820219256395),
            relationTarget: 'Account'),
        ModelProperty(
            id: const IdUid(7, 7694403370233527358),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 6583901134545039008),
            relationTarget: 'Category')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 1398046975516183605),
      name: 'Record',
      lastPropertyId: const IdUid(7, 8331835869436828837),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8387618665224923497),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6672273601396437187),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3697323532773471548),
            name: 'amount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7899527406600690727),
            name: 'note',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 743377096717590465),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7859576223298628026),
            name: 'accountId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 6728756436688186663),
            relationTarget: 'Account'),
        ModelProperty(
            id: const IdUid(7, 8331835869436828837),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(9, 469984867852349559),
            relationTarget: 'Category')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(6, 1398046975516183605),
      lastIndexId: const IdUid(9, 469984867852349559),
      lastRelationId: const IdUid(3, 2489885297072464504),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Account: EntityDefinition<Account>(
        model: _entities[0],
        toOneRelations: (Account object) => [],
        toManyRelations: (Account object) => {
              RelInfo<Account>.toMany(1, object.id): object.goals,
              RelInfo<Record>.toOneBacklink(
                      6, object.id, (Record srcObject) => srcObject.account):
                  object.records,
              RelInfo<Budget>.toManyBacklink(2, object.id): object.budgets,
              RelInfo<Payment>.toOneBacklink(
                      6, object.id, (Payment srcObject) => srcObject.account):
                  object.payments
            },
        getId: (Account object) => object.id,
        setId: (Account object, int id) {
          object.id = id;
        },
        objectToFB: (Account object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final balanceOffset = fbb.writeString(object.balance);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, balanceOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Account(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              balance: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo(object.goals, store,
              RelInfo<Account>.toMany(1, object.id), store.box<Account>());
          InternalToManyAccess.setRelInfo(
              object.records,
              store,
              RelInfo<Record>.toOneBacklink(
                  6, object.id, (Record srcObject) => srcObject.account),
              store.box<Account>());
          InternalToManyAccess.setRelInfo(
              object.budgets,
              store,
              RelInfo<Budget>.toManyBacklink(2, object.id),
              store.box<Account>());
          InternalToManyAccess.setRelInfo(
              object.payments,
              store,
              RelInfo<Payment>.toOneBacklink(
                  6, object.id, (Payment srcObject) => srcObject.account),
              store.box<Account>());
          return object;
        }),
    Budget: EntityDefinition<Budget>(
        model: _entities[1],
        toOneRelations: (Budget object) => [],
        toManyRelations: (Budget object) => {
              RelInfo<Budget>.toMany(2, object.id): object.accounts,
              RelInfo<Budget>.toMany(3, object.id): object.categories
            },
        getId: (Budget object) => object.id,
        setId: (Budget object, int id) {
          object.id = id;
        },
        objectToFB: (Budget object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final amountOffset = fbb.writeString(object.amount);
          final periodOffset = fbb.writeString(object.period);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, amountOffset);
          fbb.addOffset(3, periodOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Budget(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              amount: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              period: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo(object.accounts, store,
              RelInfo<Budget>.toMany(2, object.id), store.box<Budget>());
          InternalToManyAccess.setRelInfo(object.categories, store,
              RelInfo<Budget>.toMany(3, object.id), store.box<Budget>());
          return object;
        }),
    Category: EntityDefinition<Category>(
        model: _entities[2],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final natureOffset = fbb.writeString(object.nature);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, natureOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Category(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              nature: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Goal: EntityDefinition<Goal>(
        model: _entities[3],
        toOneRelations: (Goal object) => [],
        toManyRelations: (Goal object) => {},
        getId: (Goal object) => object.id,
        setId: (Goal object, int id) {
          object.id = id;
        },
        objectToFB: (Goal object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final targetAmountOffset = fbb.writeString(object.targetAmount);
          final currentAmountOffset = fbb.writeString(object.currentAmount);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, targetAmountOffset);
          fbb.addOffset(3, currentAmountOffset);
          fbb.addInt64(4, object.endDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Goal(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              targetAmount: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              currentAmount: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              endDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Payment: EntityDefinition<Payment>(
        model: _entities[4],
        toOneRelations: (Payment object) => [object.account, object.category],
        toManyRelations: (Payment object) => {},
        getId: (Payment object) => object.id,
        setId: (Payment object, int id) {
          object.id = id;
        },
        objectToFB: (Payment object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          final amountOffset = fbb.writeString(object.amount);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, typeOffset);
          fbb.addOffset(3, amountOffset);
          fbb.addInt64(4, object.date.millisecondsSinceEpoch);
          fbb.addInt64(5, object.account.targetId);
          fbb.addInt64(6, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Payment(
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              amount: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              date: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.account.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.account.attach(store);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.category.attach(store);
          return object;
        }),
    Record: EntityDefinition<Record>(
        model: _entities[5],
        toOneRelations: (Record object) => [object.account, object.category],
        toManyRelations: (Record object) => {},
        getId: (Record object) => object.id,
        setId: (Record object, int id) {
          object.id = id;
        },
        objectToFB: (Record object, fb.Builder fbb) {
          final typeOffset = fbb.writeString(object.type);
          final amountOffset = fbb.writeString(object.amount);
          final noteOffset = fbb.writeString(object.note);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, typeOffset);
          fbb.addOffset(2, amountOffset);
          fbb.addOffset(3, noteOffset);
          fbb.addInt64(4, object.date.millisecondsSinceEpoch);
          fbb.addInt64(5, object.account.targetId);
          fbb.addInt64(6, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Record(
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              amount: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              note: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              date: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.account.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.account.attach(store);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.category.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Account] entity fields to define ObjectBox queries.
class Account_ {
  /// see [Account.id]
  static final id = QueryIntegerProperty<Account>(_entities[0].properties[0]);

  /// see [Account.name]
  static final name = QueryStringProperty<Account>(_entities[0].properties[1]);

  /// see [Account.balance]
  static final balance =
      QueryStringProperty<Account>(_entities[0].properties[2]);

  /// see [Account.goals]
  static final goals =
      QueryRelationToMany<Account, Goal>(_entities[0].relations[0]);
}

/// [Budget] entity fields to define ObjectBox queries.
class Budget_ {
  /// see [Budget.id]
  static final id = QueryIntegerProperty<Budget>(_entities[1].properties[0]);

  /// see [Budget.name]
  static final name = QueryStringProperty<Budget>(_entities[1].properties[1]);

  /// see [Budget.amount]
  static final amount = QueryStringProperty<Budget>(_entities[1].properties[2]);

  /// see [Budget.period]
  static final period = QueryStringProperty<Budget>(_entities[1].properties[3]);

  /// see [Budget.accounts]
  static final accounts =
      QueryRelationToMany<Budget, Account>(_entities[1].relations[0]);

  /// see [Budget.categories]
  static final categories =
      QueryRelationToMany<Budget, Category>(_entities[1].relations[1]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// see [Category.id]
  static final id = QueryIntegerProperty<Category>(_entities[2].properties[0]);

  /// see [Category.name]
  static final name = QueryStringProperty<Category>(_entities[2].properties[1]);

  /// see [Category.nature]
  static final nature =
      QueryStringProperty<Category>(_entities[2].properties[2]);
}

/// [Goal] entity fields to define ObjectBox queries.
class Goal_ {
  /// see [Goal.id]
  static final id = QueryIntegerProperty<Goal>(_entities[3].properties[0]);

  /// see [Goal.name]
  static final name = QueryStringProperty<Goal>(_entities[3].properties[1]);

  /// see [Goal.targetAmount]
  static final targetAmount =
      QueryStringProperty<Goal>(_entities[3].properties[2]);

  /// see [Goal.currentAmount]
  static final currentAmount =
      QueryStringProperty<Goal>(_entities[3].properties[3]);

  /// see [Goal.endDate]
  static final endDate = QueryIntegerProperty<Goal>(_entities[3].properties[4]);
}

/// [Payment] entity fields to define ObjectBox queries.
class Payment_ {
  /// see [Payment.id]
  static final id = QueryIntegerProperty<Payment>(_entities[4].properties[0]);

  /// see [Payment.name]
  static final name = QueryStringProperty<Payment>(_entities[4].properties[1]);

  /// see [Payment.type]
  static final type = QueryStringProperty<Payment>(_entities[4].properties[2]);

  /// see [Payment.amount]
  static final amount =
      QueryStringProperty<Payment>(_entities[4].properties[3]);

  /// see [Payment.date]
  static final date = QueryIntegerProperty<Payment>(_entities[4].properties[4]);

  /// see [Payment.account]
  static final account =
      QueryRelationToOne<Payment, Account>(_entities[4].properties[5]);

  /// see [Payment.category]
  static final category =
      QueryRelationToOne<Payment, Category>(_entities[4].properties[6]);
}

/// [Record] entity fields to define ObjectBox queries.
class Record_ {
  /// see [Record.id]
  static final id = QueryIntegerProperty<Record>(_entities[5].properties[0]);

  /// see [Record.type]
  static final type = QueryStringProperty<Record>(_entities[5].properties[1]);

  /// see [Record.amount]
  static final amount = QueryStringProperty<Record>(_entities[5].properties[2]);

  /// see [Record.note]
  static final note = QueryStringProperty<Record>(_entities[5].properties[3]);

  /// see [Record.date]
  static final date = QueryIntegerProperty<Record>(_entities[5].properties[4]);

  /// see [Record.account]
  static final account =
      QueryRelationToOne<Record, Account>(_entities[5].properties[5]);

  /// see [Record.category]
  static final category =
      QueryRelationToOne<Record, Category>(_entities[5].properties[6]);
}
